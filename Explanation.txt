Explanation of Eye Tracking Animation Project Files

1. index.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Simple Human Face Eye Tracking</title>
  <link rel="stylesheet" href="index.css" />
</head>
<body>
  <div class="face">
    <div class="eye left-eye">
      <div class="pupil"></div>
    </div>
    <div class="eye right-eye">
      <div class="pupil"></div>
    </div>
    <div class="nose"></div>
    <div class="mouth"></div>
  </div>
  <script src="Eye.js"></script>
</body>
</html>

- This is the main HTML structure.
- The <div class="face"> represents the face container.
- Inside the face, there are two eyes (left-eye and right-eye), each containing a pupil div.
- The nose and mouth divs represent the nose and mouth shapes.
- The CSS file index.css styles the face and its parts.
- The JavaScript file Eye.js contains the logic for eye tracking.

2. index.css

body {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
  background-color: #f0e6d2;
}

- Styles the body to center the face vertically and horizontally with a light background.

.face {
  position: relative;
  width: 300px;
  height: 350px;
  background: #f9d9b7;
  border-radius: 50% / 60%;
  box-shadow: 0 0 15px rgba(0,0,0,0.2);
}

- Styles the face as an oval shape with a skin-tone background and subtle shadow.

.eye {
  width: 80px;
  height: 80px;
  background: white;
  border: 4px solid #333;
  border-radius: 50%;
  position: absolute;
  overflow: hidden;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

- Styles each eye as a white circle with a border and shadow.

.left-eye {
  top: 90px;
  left: 60px;
}

.right-eye {
  top: 90px;
  right: 60px;
}

- Positions the left and right eyes on the face.

.pupil {
  width: 30px;
  height: 30px;
  background: black;
  border-radius: 50%;
  position: absolute;
  top: 25px;
  left: 25px;
  transition: top 0.1s ease, left 0.1s ease;
}

- Styles the pupil as a smaller black circle inside the eye.
- The transition property makes pupil movement smooth.

.nose {
  position: absolute;
  top: 180px;
  left: 50%;
  transform: translateX(-50%);
  width: 20px;
  height: 30px;
  background: #d9a066;
  border-radius: 50% 50% 60% 60% / 100% 100% 40% 40%;
  box-shadow: inset -2px 0 3px rgba(0,0,0,0.1);
}

- Styles the nose as a small oval shape centered below the eyes.

.mouth {
  position: absolute;
  bottom: 70px;
  left: 50%;
  transform: translateX(-50%);
  width: 120px;
  height: 60px;
  border-bottom: 6px solid #b35c3a;
  border-radius: 0 0 60px 60px;
  background: #f9bca0;
  box-shadow: inset 0 5px 10px rgba(255,255,255,0.6);
}

- Styles the mouth as a curved shape near the bottom of the face.

3. Eye.js

document.addEventListener('DOMContentLoaded', () => {
  const eyes = document.querySelectorAll('.eye');
  const pupils = document.querySelectorAll('.pupil');

  document.addEventListener('mousemove', (event) => {
    eyes.forEach((eye, index) => {
      const pupil = pupils[index];
      const rect = eye.getBoundingClientRect();

      const eyeCenterX = rect.left + rect.width / 2;
      const eyeCenterY = rect.top + rect.height / 2;

      const dx = event.clientX - eyeCenterX;
      const dy = event.clientY - eyeCenterY;
      const angle = Math.atan2(dy, dx);

      const maxDistance = (rect.width / 2) - (pupil.offsetWidth / 2) - 4;

      const pupilX = maxDistance * Math.cos(angle);
      const pupilY = maxDistance * Math.sin(angle);

      pupil.style.left = `${rect.width / 2 + pupilX - pupil.offsetWidth / 2}px`;
      pupil.style.top = `${rect.height / 2 + pupilY - pupil.offsetHeight / 2}px`;
    });
  });
});

- Waits for the DOM content to load.
- Selects all eyes and pupils.
- Listens for mousemove events.
- For each eye, calculates the center position.
- Calculates the angle between the mouse pointer and the eye center.
- Calculates the maximum distance the pupil can move inside the eye.
- Moves the pupil towards the mouse pointer but constrained within the eye boundary.
- Updates the pupil's CSS left and top properties to move it smoothly.

This creates a smooth eye-tracking animation where the pupils follow the mouse cursor within the eyes.

End of explanation.
